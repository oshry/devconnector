{"ast":null,"code":"// Register User\nimport axios from 'axios'; // import {TEST_DISPATCH} from \"./types\";\n\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_Decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/api/users/register', userData).then(res => history.push('/login')).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  })); // console.log(newUser);\n  // return {\n  //     type: TEST_DISPATCH,\n  //     payload: userData\n  // }\n}; // Login\n\nexport const loginUser = userData => dispatch => {\n  axios.post('/api/users/login', userData).then(res => {\n    // Save to localStorage\n    const token = res.data.token; // Set token to localStorage\n\n    localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n    setAuthToken(token); //  decode Token to get user data\n\n    const decoded = jwt_Decode(token); //  Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; //  Log user out\n\nexport const logoutUser = () => dispatch => {\n  //  Remove token from localStorage\n  localStorage.removeItem('jwtToken'); // remove auth header for future requests\n\n  setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/oshry/Projects/devconnector/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_Decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAAQC,UAAR,EAAoBC,gBAApB,QAA2C,SAA3C;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DR,EAAAA,KAAK,CAACS,IAAN,CAAW,qBAAX,EAAkCH,QAAlC,EACKI,IADL,CACUC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CADjB,EAEKC,KAFL,CAEWC,GAAG,IACNN,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAEZ,UADD;AAELa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAHhB,EAD2D,CAS3D;AACA;AACA;AACA;AACA;AACH,CAdM,C,CAeP;;AACA,OAAO,MAAMC,SAAS,GAAGb,QAAQ,IAAIE,QAAQ,IAAI;AAC7CR,EAAAA,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EACKI,IADL,CACUC,GAAG,IAAI;AACT;AADS,UAEDS,KAFC,GAEST,GAAG,CAACO,IAFb,CAEDE,KAFC,EAGT;;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJS,CAKT;;AACAnB,IAAAA,YAAY,CAACmB,KAAD,CAAZ,CANS,CAOT;;AACA,UAAMG,OAAO,GAAGrB,UAAU,CAACkB,KAAD,CAA1B,CARS,CAST;;AACAZ,IAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAZL,EAaKV,KAbL,CAaWC,GAAG,IACNN,QAAQ,CAAC;AACLO,IAAAA,IAAI,EAAEZ,UADD;AAELa,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,GAAD,CAdhB;AAmBH,CApBM,C,CAsBP;;AACA,OAAO,MAAMM,cAAc,GAAID,OAAD,IAAa;AACvC,SAAO;AACHR,IAAAA,IAAI,EAAEX,gBADH;AAEHY,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,UAAU,GAAG,MAAMjB,QAAQ,IAAI;AACxC;AACAa,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACAzB,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAO,EAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAPM","sourcesContent":["// Register User\nimport axios from 'axios';\n// import {TEST_DISPATCH} from \"./types\";\nimport setAuthToken from '../utils/setAuthToken'\nimport jwt_Decode from 'jwt-decode';\n\nimport {GET_ERRORS, SET_CURRENT_USER} from \"./types\";\n\n\n\nexport const registerUser = (userData, history) => dispatch => {\n    axios.post('/api/users/register', userData)\n        .then(res => history.push('/login'))\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n    // console.log(newUser);\n    // return {\n    //     type: TEST_DISPATCH,\n    //     payload: userData\n    // }\n}\n// Login\nexport const loginUser = userData => dispatch => {\n    axios.post('/api/users/login', userData)\n        .then(res => {\n            // Save to localStorage\n            const { token } = res.data\n            // Set token to localStorage\n            localStorage.setItem('jwtToken', token);\n            // Set token to Auth header\n            setAuthToken(token);\n            //  decode Token to get user data\n            const decoded = jwt_Decode(token);\n            //  Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n\n// Set logged in user\nexport const setCurrentUser = (decoded) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n\n//  Log user out\nexport const logoutUser = () => dispatch => {\n    //  Remove token from localStorage\n    localStorage.removeItem('jwtToken');\n    // remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n}\n"]},"metadata":{},"sourceType":"module"}